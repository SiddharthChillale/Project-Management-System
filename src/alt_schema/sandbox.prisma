generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("SANDBOX_DATABASE_URL")
}

enum Role {
    PUBLIC
    DEVELOPER
    PROJECT_MANAGER
    REVIEWER
    ADMIN
    CLIENT
}

enum Semester {
    FALL
    SPRING
    WINTER
    SUMMER
}

enum Status {
    IS_FINAL
    IS_WAITLIST
    IS_ENROLL
}

model Project {
    id                 Int      @id @default(autoincrement()) //primary key is collision-avoidant unique identifier.
    name               String?  @default("Default Project") @db.VarChar(255) // project name
    description        String?
    teamSize           Int?
    publicAttachments  Json? // public by default 
    privateAttachments Json? // seen only by few individuals
    isArchived         Boolean  @default(false)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    eventId Int?
    event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull)

    courseId Int?
    course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

    creator          UserProfile? @relation(fields: [creatorProfileId], references: [id])
    creatorProfileId Int?

    projectAssociations ProjectAssociation[]
    ratings             Ratings[]
}

model User {
    id Int @id @default(autoincrement())

    email        String   @unique
    password     String   @db.VarChar(255)
    salt         String?
    refreshToken String?  @unique
    oneTimeToken String?  @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    profiles UserProfile[]
}

model UserProfile {
    id          Int     @id @default(autoincrement())
    userName    String  @default("<None>") // possible to construct this from the part before email? abc.xyz@email.com: extract abc.xyz as username. give option to change username
    profilePic  Json? // can be url or a localFilePath
    isActive    Boolean @default(true)
    email       String // this must be same as email from the User with id "userId"
    role        Role
    socialLinks Json?
    userId      Int // foreign key
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    projectAssociations ProjectAssociation[]
    ratings             Ratings[]
    participantEvents   Event[]              @relation("participants")
    courses             Course[]
    createdEvents       Event[]              @relation("creator")
    createdProjects     Project[]
}

model Event {
    id               Int          @id @default(autoincrement())
    name             String
    startDate        DateTime
    endDate          DateTime
    creator          UserProfile? @relation("creator", fields: [creatorProfileId], references: [id])
    creatorProfileId Int?

    projects     Project[]
    participants UserProfile[] @relation("participants")
}

model Course {
    id       Int    @id @default(autoincrement())
    name     String
    code     String
    semester String
    year     Int

    departmentId Int
    department   Department @relation(fields: [departmentId], references: [id], onDelete: SetDefault)

    projects     Project[]
    userProfiles UserProfile[]
}

model Department {
    id   Int    @id @default(autoincrement())
    name String @default("deleted")

    courses Course[]
}

model ProjectAssociation {
    id        Int      @id @default(autoincrement())
    status    Status
    userRole  Role
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    userProfileId Int
    userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

    projectId Int
    project   Project @relation(fields: [projectId], references: [id])
}

model ScoreCategory {
    id   Int    @id @default(autoincrement())
    name String @default("unkown") // business logic, can be "default" or "unknown" or anything else.

    ratings Ratings[]
}

model Ratings {
    id    Int @id @default(autoincrement())
    score Int @default(0)

    scoreCategory   ScoreCategory @relation(fields: [scoreCategoryId], references: [id], onDelete: SetDefault)
    scoreCategoryId Int // A rating should exist without a score

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // If a project is removed, keeping it's score doesn't make sense.
    projectId Int

    userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
    userProfileId Int // this is to store the project-"reviewer" relation. Other roles+project relation is not satisfied in this table
}
